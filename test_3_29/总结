（4）	C和C++的区别
1.	函数默认值：
C语言：int FUN(int a = 10);//会报错
C++：支持函数默认参数，从右到左，不能从左到右，但是相同的函数例如：	
int fun(int a ,int b = 10);
int fun(int a = 20,int b);//这样写是没有任何问题的
2.	内联函数：https://blog.csdn.net/C1029323236/article/details/84454963
内联函数和宏特别相似，内联函数是在编译的时候展开的，宏是在预编译的时候展开的，内联函数相比宏更安全，因为它会进行类型检测，而且不用担心重定义的问题，它的执行效率相比宏是较高的，通常用它来代替函数体非常小的函数，如果很多代码的函数不适合用内联函数代替，一是函数在堆栈调用开销与普通函数相比是微不足道了，二是大量的代码不适合调试，三是如果函数代码体达到一个阈值，就会换为普通函数，同时，注意递归函数不能声明为内联函数。
3.	函数重载：https://blog.csdn.net/C1029323236/article/details/84453878
1)	参数个数不同
2)	参数顺序不同
3)	参数类型不同
函数的重载是多态的一种，正所谓静多态（函数重载，函数模板），动多态（运行时的多态）：继承中的多态（虚函数）
函数重载有一个作用域的问题：
#include <iostream>
using namespace std;
bool compare(int a,int b)
{
    return a > b;
}
 
bool  compare(double a,double b)
{
    return a > b;
}
int main()
{
    //bool compare(int a,int b);//在这里声明该函数，则一直调用该函数。
    compare(10,20);
    compare(10.5,20.5);
    return 0;
}
4.	const
C语言：修时候不能做左值，可以不初始化，但是之后就没有机会初始化，不可以当作数组的下标，可以通过指针修改，简单来说，和普通变量的区别时不能做左值
C++：真正的常量。定义的时候必须初始化，可以用作数组的下标，也可以通过指针修改，C++的指针可能退化为C语言的指针
5.	引用：
引用和指针的区别
6.	malloc,free && new,delete：实现机制，区别，联系
7.	作用域：

