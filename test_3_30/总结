/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isUnivalTree(TreeNode* root) {
        return _isUnivalTree(root,root->val);
    }
    
    bool _isUnivalTree(TreeNode* root,const int& value)
    {
        if(!root)
            return true;
        if(root->val == value)
            return _isUnivalTree(root->left,value) && _isUnivalTree(root->right,value);
        return false;
    }
private:

};

class Solution {
public:
    vector<string> findWords(vector<string>& words) {
        vector<string> res;
        string line1 = "qwertyuiop";
        string line2 = "asdfghjkl";
        string line3 = "zxcvbnm";
        for(int i = 0;i<words.size();++i)
        {
            int j = 0;
            while(line1.find(tolower(words[i][j])) != string::npos)
            {
                j++;
                if(j == words[i].size())
                {
                    res.push_back(words[i]);
                }
            }
            j = 0;
            while(line2.find(tolower(words[i][j])) != string::npos)
            {
                j++;
                if(j == words[i].size())
                {
                    res.push_back(words[i]);
                }
            }
            j = 0;
            while(line3.find(tolower(words[i][j])) != string::npos)
            {
                j++;
                if(j == words[i].size())
                {
                    res.push_back(words[i]);
                }
            }
        }
        return res;
    }
};

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
    int maxDepth(Node* root) {
        if(!root)
            return 0;
        int max = 0;
        for(int i = 0;i<root->children.size();++i)
        {
            max = std::max(max,maxDepth(root->children[i]));
        }
        return max+1;
    }
};
