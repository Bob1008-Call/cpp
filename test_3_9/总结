（一）命名空间
    1.作用
    2.定义方式
        （1）普通：namespace N1{}
        （2）可以嵌套
        （3）在同一个工程中可以定义多个相同名称的命名空间，编译器最后将多个相同名称的命名空间合并成一个
    3.使用方式
        （1）在成员前直接加命名空间名字以及::
        （2）using 命名空间名字::成员名字
        （3）using namespace 命名空间名字
（二）函数的补充
    1.对函数的检测更加严格
        （1）参数类型的检测更加严格
        （2）返回值的类型要求严格
    2.缺省参数
        （1）概念：在声明或定义函数时，可以给函数的参数带一个默认的缺省值，在调用函数时，如果没有传递实参，就使用缺省值，如果传递了实参，就是用传递的实参。
        （2）缺省参数的分类
            （i）全缺省参数：所有参数都带有缺省值；注意：如果传递了部分参数，形参从左往右开始接受实参
            （ii）半缺省参数：部分参数带有缺省值；规则：只能从右往左给出
        （3）注意
            （i）缺省参数只能从右往左依次给出
            （ii）声明和定义的位置不能同时出现 最好：给在函数声明的位置
            （iii）常量或全局变量
            （iiii）全缺省的函数与无参的同名函数不能同时存在
    3.函数名字修饰规则：
        （1）C语言：在函数名字加下划线
        （2）C++：将函数参数的类型添加到修改后的名字中
            （i）Vs：________________________________________________
            （ii）Linux：____________________________________________
    4.函数重载：
        （1）概念：必须在同一个作用域，函数名字相同，参数列表不同，与函数的返回类型无关。
        （2）参数类型推演：编译器通过推演实参的类型确定调用具体的函数
            （i）有具体���象的函数
            （ii）没有具体对应类型的函数，可以发生隐式类型转化来进行匹配
            （iii）没有具体对应类型的函数，也不能通过隐式转化来进行匹配，就报错
        （3）C++实现函数重载的原理
            （i）C++编译器最终将参数的类型编译到名字中
            （ii）编译器在底层所使用的名字不一样
        （4）extern 'C'：让C++编译器将函数按照C语言的风格进行编译
